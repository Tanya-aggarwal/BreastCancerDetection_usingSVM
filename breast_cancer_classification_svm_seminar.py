# -*- coding: utf-8 -*-
"""Breast Cancer Classification-SVM-seminar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oyb7MRzc8FdMCvW-pP54iUVuvN5-posF

# **Breast Cancer Classification using SVM**

## **Import necessary modules**
"""

import pandas as pd
import numpy as np
import os
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score

from google.colab import drive
drive.mount("/content/drive", force_remount=True)
path=r"/content/drive/My Drive/breast_cancer"

dpath = os.listdir(path)
dirname =[]
for i in range(0,len(dpath)):
  dirname.append(path + '/' + dpath[i])
df=pd.read_csv(dirname[0])
df

"""## **Exploratory Data analysis and preprocessing**"""

df.info()

df.drop(['id','Unnamed: 32'], inplace=True ,axis=1)
df.rename(columns= {"diagnosis":"target"}, inplace=True)

import matplotlib.pyplot as plt

sns.countplot(df["target"])
plt.show()

radius = df[['radius_mean','radius_se','radius_worst','target']]
sns.pairplot(radius, hue='target')

area = df[['area_mean','area_se','area_worst','target']]
sns.pairplot(area, hue='target')

corr = df.corr()
plt.figure(figsize=(20,10))
sns.heatmap(corr, cmap='coolwarm', annot = True)
plt.show()

df["target"]= [1 if i== "M" else 0 for i in df["target"]]

y=df.target
x=df.drop(["target"], axis=1)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x1=sc.fit_transform(x)
x1

x_train, x_test, y_train, y_test=train_test_split(x1,y, test_size=0.2,random_state=42)

"""## **SVM**"""

from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.metrics import roc_curve
from sklearn.metrics import auc

svm_model = SVC()
svm_model.fit(x_train,y_train)

y_pred_train=svm_model.predict(x_train)
y_pred=svm_model.predict(x_test)
scor=accuracy_score(y_test,y_pred)
scr=accuracy_score(y_train,y_pred_train)
print("Train Accuracy",scr*100,'%')
print("Test Accuracy",scor*100,'%')

cm=confusion_matrix(y_test, y_pred,labels=[0,1])
hm=sns.heatmap(cm,  annot = True)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

print(classification_report(y_test, y_pred))

"""## **Optimization using GridSearchCV**"""

from sklearn.model_selection import GridSearchCV 
param_grid = {'C': [0.01,0.1, 1],  
              'gamma': ['auto','scale'], 
              'max_iter': [100],
              'kernel': ['rbf']}  

grid = GridSearchCV(SVC(probability=True), param_grid, refit = True, verbose = 3,return_train_score=True) 
  
est=grid.fit(x_train, y_train)

print(grid.best_params_) 
print(grid.best_estimator_)

pred_train=grid.predict(x_train)
pred=grid.predict(x_test)
scor=accuracy_score(y_test,pred)
scr=accuracy_score(y_train,pred_train)
print("Train Accuracy",scr*100,'%')
print("Test Accuracy",scor*100,'%')

test_scores = est.cv_results_['mean_test_score']
train_scores = est.cv_results_['mean_train_score'] 

plt.plot(test_scores, label='test')
plt.plot(train_scores, label='train')
plt.legend(loc='best')
plt.show()

cn=confusion_matrix(y_test, pred,labels=[0,1])
hn=sns.heatmap(cn,  annot = True)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

print(classification_report(y_test,pred))

pred_proba=grid.predict_proba(x_test)[:,1]

fpr, tpr, threshold = roc_curve(y_test,pred_proba)
ar=auc(fpr,tpr)
print("ROC-AUC score: %.3f"%ar)
plt.plot(fpr, tpr,marker='.')
plt.fill_between(fpr,tpr,alpha=0.20)
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')